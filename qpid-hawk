#!/bin/bash

# --debug, --dry = simulate changes to Qpid omitting actual changes.

. $(dirname "$(readlink -f "$0")")/commons

# Random sequence of characters used internally to separate columns.
# Separator must not present in names of exchanges, bindings or queues!
column_separator="$(whoami | md5sum | base64)"

# -------------
# Qpid Entities
# -------------

# Prints "queue_size<col 12>queue_name".
queues() #broker_address
{
    qpid-stat -q "$1"\
    | awk '
        NR==2{len=match($0,"dur")-4}
        NR>=4{print substr($0,len+20,10)" "substr($0,3,len-1)}'\
    | sed -r 's/ +$//'
}

# Prints list of exchange names.
exchanges() #broker_address
{
    qpid-stat -e "$1"\
    | awk '
        NR==2{len=match($0,"type")-4}
        NR>=4{print substr($0,3,len-1)}'\
    | sed -r 's/ +$//'
}

# Prints "exchange<comma>queue<comma>binding_key"
bindings() #broker_address, comma=";"
{
    local comma="${2:-;}"
    qpid-config -b -a "$1" queues\
    | awk '
        /^Queue/{name=substr($0,8,length()-8)}
        /bind/&&!/'\''$/{
            pos=index($0," => ");
            print substr($0,pos+4)"'$comma'"name"'$comma'"substr($0,11,pos-12)
        }'
}

# ----------------------
# Qpid Configuration API
# ----------------------

# Read and cache required Qpid broker info for further usage.
use() #broker_address
{
    assert "-n '$1'" "Qpid broker address expected: $(u use) $@"
    
    if ! is_debug; then
        read -p "Type \"yes\" to run Qpid $(format 4 $1) $(format 43 30 ' configuration update '): " input
        [ "$input" != yes ] && exit 1
        echo
    fi

    echo "Reading Qpid configuration $(u "$1")"
    echo -ne '\tObtaining list of queues and exchanges'

    merged_queues=$(queues "$1" | awk '{print "-"substr($0,12)}')
    merged_exchanges=$(exchanges "$1" | sed 's/^/-/')
    status
    
    echo -ne '\tParsing queue bindings'
    merged_bindings=$(bindings "$1" "$column_separator" | sed 's/^/-/')
    status

    broker="$1"
}

# Create new queue if it does not exist.
queue() #queue_name, options...
{
    assert_broker
    assert "-n '$1'" "Queue name expected: $(u queue) $@"

    if contains "$merged_queues" "$1"; then
        format 2 "Queue $(echo_queue "$1") already exists\n"
    else
        echo -ne "Create queue $(echo_queue "$1") "
        is_debug || qpid-config -a "$broker" add queue "$1" ${*:2}
        status
    fi
    merged_queues=$(append "$merged_queues" "$1")
}

# Create new binding if it does not exist.
binding() #exchange_name, queue_name, binding_key="", options...
{
    assert_broker
    assert "-n '$1'" "Exchnage name expected: $(u binding) $@"
    assert "-n '$2'" "Queue name expected: $(u binding) $@"

    if contains "$merged_bindings" "$1$column_separator$2$column_separator$3"; then
        format 2 "Binding $(echo_binding "$1" "$2" "$3") already exists\n"
    else
        echo -ne "Binding $(echo_binding "$1" "$2" "$3") "
        if [ -n "$3" ]; then
            is_debug || qpid-config -a "$broker" bind "$1" "$2" "$3" ${*:4}
            status
        else
            is_debug || qpid-config -a "$broker" bind "$1" "$2" ${*:4}
            status
        fi
    fi
    merged_bindings=$(append "$merged_bindings" "$1$column_separator$2$column_separator$3")
}

# Bind queue to amq.topic with given binding key.
amq_topic_binding() #queue_name, binding_key="", options...
{
    binding "amq.topic" $@
}

# Bind queue to amq.match with given binding key.
amq_match_binding() #queue_name, binding_key="", options...
{
    binding "amq.match" $@
}

# Bind queue to amq.direct with given binding key.
amq_direct_binding() #queue_name, binding_key="", options...
{
    binding "amq.direct" $@
}

# Creates new exchange.
exchange() #type, name, options...
{
    assert_broker
    assert "-n '$1'" "Exchnage type expected: $(u exchange) $@"
    assert "-n '$2'" "Exchnage name expected: $(u exchange) $@"

    if contains "$merged_exchanges" "$2"; then
        format 2 "Exchnage $(echo_exchange "$2") already exists\n"
    else
        echo -ne "Creating exchange $(echo_exchange "$2") "
        is_debug || qpid-config -a "$broker" add exchange "$1" "$2" ${*:3}
        status
    fi
    merged_exchanges=$(append "$merged_exchanges" "$2")
}

# Create new topic exchange.
topic_exchange() #name, options...
{
    exchange "topic" $@
}

# Create new direct exchange.
direct_exchange() #name, options...
{
    exchange "direct" $@
}

# Removes queues from Qpid which were not touched during current configuration session.
cleanup_queues() #skip_pattern=<none>
{
    assert_broker
    local junk=$(echo "$merged_queues" | sed -nr 's/^-//p' | grep -vP "${1:-(?!)}")
    if [ -z "$junk" ]; then
        format 2 'Queues are up to date\n'
    else
        # Disable pathname expansion.
        set -f
        echo -n 'Reading queue usage statistics'
        preview=$(queues "$broker")
        status
        
        format 2 '\n   Depth   Queue'
        # Read lines from a variable without creating a subshell.
        while read queue; do
            echo -e "$preview" | grep -xP ".{11}$(unregex "$queue")"
        done < <(echo -e "$junk")

        echo
        read -p "Type \"yes\" to $(format 101 30 ' delete queues ') from above: " input
        if [ "$input" = yes ]; then
            echo
            while read queue; do
                echo -n "Deleting $(echo_queue "$queue") "
                is_debug || qpid-config -a "$broker" del queue "$queue" --force
                status
                merged_queues=$(remove "$merged_queues" "$queue")
                merged_bindings=$(echo -e "$merged_bindings"  | grep -vF "$column_separator$queue$column_separator")
            done < <(echo -e "$junk")
        else
            format 2 'Queue cleanup was skipped.\n'
        fi
    fi
}

# Removes bindings from Qpid which were not touched during current configuration session.
cleanup_bindings() #skip_pattern=<none>
{
    f() #binding, index
    {
        echo "$1" | awk '{ split($0, a, "'$column_separator'"); print a['$2'] }'
    }
    assert_broker
    local junk=$(echo "$merged_bindings" | sed -nr 's/^-//p' | grep -vP "${1:-(?!)}")
    if [ -z "$junk" ]; then
        format 2 'Bindings are up to date\n'
    else
        set -f
        
        echo 'Redundant bindings:'
        while read binding; do
            echo "   $(echo_binding "$(f "$binding" 1)" "$(f "$binding" 2)" "$(f "$binding" 3)")"
        done < <(echo -e "$junk")
        
        echo
        read -p "Type \"yes\" to $(format 101 30 ' delete bindings ') from above: " input
        if [ "$input" = yes ]; then
            echo
            while read binding; do
                echo -n "Unbind $(echo_binding "$(f "$binding" 1)" "$(f "$binding" 2)" "$(f "$binding" 3)") "
                if [ -n "$(f "$binding" 3)" ]; then
                    is_debug || qpid-config -a "$broker" unbind "$(f "$binding" 1)" "$(f "$binding" 2)" "$(f "$binding" 3)"
                    status
                else
                    is_debug || qpid-config -a "$broker" unbind "$(f "$binding" 1)" "$(f "$binding" 2)"
                    status
                fi
                merged_bindings=$(remove "$merged_bindings" "$binding")
            done < <(echo -e "$junk")
        else
            format 2 "Bindings cleanup was skipped.\n"
        fi
    fi
}

# Removes exchnages from Qpid which were not touched during current configuration session.
cleanup_exchanges() #skip_pattern=<none>
{
    assert_broker
    local junk=$(echo "$merged_exchanges" | sed -nr 's/^-//p' | grep -vP "${1:-(?!)}")
    if [ -z "$junk" ]; then
        format 2 'Exchanges are up to date\n'
    else
        set -f

        echo 'Redundant exchanges:'
        while read exchange; do
            echo "   $(echo_exchange "$exchange")"
        done < <(echo -e "$junk")
        
        echo
        read -p "Type \"yes\" to $(format 101 30 ' delete exchanges ') from above: " input
        if [ "$input" = yes ]; then
            echo
            while read exchnage; do
                echo -n "Delete $(echo_exchange "$exchnage") "
                is_debug || qpid-config -a "$broker" del exchange "$exchnage"
                status
                merged_exchanges=$(remove "$merged_exchanges" "$exchnage")
                merged_bindings=$(echo -e "$merged_bindings"  | grep -vP "^$(unregex "$exchnage")$column_separator")
            done < <(echo -e "$junk")
        else
            format 2 'Exchanges cleanup was skipped.\n'
        fi
    fi
}

# ---------------
# List Operations
# ---------------

# Return 0 if \n-separated list of strings strictly contains a given needle.
contains() #list, needle
{
    echo -e "$1" | grep -qxP "[+-]$(unregex "$2")"
}

# Remove items from list which is equal to needle string.
remove() #list, needle
{
    echo -e "$1" | grep -vxP ".$(unregex "$2")"
}

append() #list, item
{
    contains "$1" "$2" && echo -e "$1" | sed -r 's/^-('$(unregex "$2")')$/+\1/' || echo -e "$1\n+$2"
}

# ---------------
# Style & Support
# ---------------

# Returns 0 if debug mode is on.
# Use command line parameter `--debug` to turn debug mode on.
is_debug()
{
    has_option "debug" || has_option "dry"
}

# Checks that $broker is defined and dies if its not.
# Used to detect weather `use` was already called.
assert_broker()
{
    assert "-n '$broker'" "Undefined broker. Run $(u use) command first."
}

# Print human-readable queue name.
echo_queue() #queue_name
{
    u "$1"
}

# Print human-readable exchange name.
echo_exchange() #exchange_name
{
    u "$1"
}

# Print human-readable binding info.
echo_binding() #exchange_name, queue_name, binding_key
{
    echo_exchange "$1"
    [ -n "$3" ] && echo -n "[$3]"
    echo -n " => "
    echo_queue "$2"
}

# ------------------
# Branding & Boot-up
# ------------------

format 32 "\
    ____          _     __   __  __               __  
   / __ \  ____  (_)___/ /  / / / /___ __      __/ /__
  / / / / / __ \/ / __  /  / /_/ / __ '/ | /| / / //_/
 / /_/ / / /_/ / / /_/ /  / __  / /_/ /| |/ |/ / ,<   
 \___\_\/ .___/_/\__,_/  /_/ /_/\__,_/ |__/|__/_/|_|  
       /_/                                            
\n"
is_debug && format 32 "Debug mode: actual Qpid modificatios are omitted.\n"
